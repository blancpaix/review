Spring 통해서 (객체의 생성 과 조립(injection))

1. xml 설정을 통해서 (bean 생성 , injection)			=> xml 언어가 java 쪽으로 들어오기 시작함	 xml 해석은 편함 ㅋ	Annotation 빼버리면 각 페이지 다 봐야함
2. xml 문서 없이도 지금과 같은 동일 작업 가능 
   >> 자바코드 이용해서 설정 작업(JAVA 파일 + Annotation)
   >> xml 파일 (x)			=> xml 파일 없어도 bean 객체 생성하고 똑같은 기능을 하도로록 만들거여

3. 기존 xml :
new GenericXmlApplicationContext("classpath:DI_Annotation_04/DI_Annotation_04.xml");		뒤에 xml 제거

   현재 java :
new AnnotationConfigApplicationContext(ConfigContext.class);    // 클래스 파일로 바뀜 그리고 ConfigContext  Annotation 을 가지고 있는 필드임...
	=> ConfigContext.class	>>	xml 대체	>>	Create bean, Injection 방법	>>	Annotation

사용 어노테이션은
1.  @Configuration :해당 클래스가 [스프링의 설정]으로 사용됨을 지정 (xml을 대체 할 거야)
    ex)
    @Configuration
    public class configcontext {}

2.  @Bean
    ex)
    @Configuration
    public class configcontext {
      
       @Bean
       public User user(){
         return new User();
       }
       
       xml 에서 아래코드과 같은 형태를 위 코드처럼 함수(method) 의 형태로 설계 
       <bean id="user" class="DI.User">					%%%%%% 이걸 어떻게 함수로 만드니?
       		함수 이름이 위의 id 값이 되는거임
       		리턴 타입이 유저 객체가 되는거고  그래서 클래스가 DI.User 인가?
    }
    
result :
> 어노테이션과 [메서드 이름]을 이용해서 스프링 컨테이너가 사용할 빈 객체 설정
> 메서드가 리턴하는 객체를 빈객체로 사용하겠다

class MemberRegisterService{

   private MemberDao memberdao;
   
   public MemberRegisterService(MemberDao memberdao){			Constructor Injection	집합 연관 (밖에서 만들어서 들어옴)
      this.memberdao = memberdao;
   }
   
}

1. xml 설정			어제 놀았읍니다 ㅎㅎㅎ
<bean id="memberRegSvc" class="MemberRegisterService">
  <constructor-arg  ref="memberdao">			// 이줄 제거하면 JAVA source 에서 위에 @Autowired 붙혀야합니다?
</bean>
<bean id="memberdao" class="MemberDao" />
  
   
1.1 추가 : @Autowired 적용
class MemberRegisterService{
   private MemberDao memberdao;
   
   @Autowired			혼자 놀지 않아요. 같이 노는데요 그 프로세스가 있어야 하는데 일일이 등록하는게 어려우니가 Annotation config elements
   public MemberRegisterService(MemberDao memberdao){
      this.memberdao = memberdao;
   }
}   


xml 문서
<context:annotation-config />   
<bean id="memberRegSvc" class="MemberRegisterService"> </bean>
<bean id="memberdao" class="MemberDao" />		// 아래 @bean 을 말하는거지?   

 
2. @Configuration
   @bean
   두개의 어노테이션을 이용해서 (java 코드 기반의 작업)
   
   @Configuration
   class Configcontext{
         
         @bean
         public MemberRegisterService memberRegSvc(){
           return new MemberRegisterService(memberdao()); //함수를 통한 주입
           // 객체를 만들때 Dao 객체를 주입한거임		 밑에잇는 bean 객체를 위에서 호출한거임...????
         } 
         
         @bean
         public MemberDao memberdao(){
          return new MemberDao();
         }
   }
   
-------------------------------------------------------------

옵션 :
<bean id="m" class="board"></bean>

=> 자바코드
@bean
public board m(){
  return new board();
}

옵션_1
@bean(name="hello")		// 만들어지는 bean 의 이름을 m 이 아니라 hello 로 하는데 사실상 필요없음~
public board m(){
  return new board();
}


오늘한거 중에서 가장 중요해요~
@Autowired 			type		이거 주로 씁니다만? ㅎㅎ
@Bean
@Resource 			name
@Configuration
@ etc....