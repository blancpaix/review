1. A 클래스 안에서 B를 생성해서 사용 => 포함 관계
	복합 입니다만??? => life cycle 이 같음

2. 파라미터로 b 의 주소값ㅇㄹ 받음 => 여기서만큼은 의존인데 사실상 포함
class A{ 
	B b;
	A(B b) {
		this.b = b;
	}
}		의무적으로 값을 받아가는것이고  	그럼 필수적일때만 사용하는거고 이거는 별로 안쓸거 같은데????

main
	// A a = new A();
B b = new B();
A a = new A(b);

class  A {			// 순수 dependency	포함관계이기는 한데... 뭐 무튼 ㅇㅇㅇ
	public B print(B b) {
		return b;
	}
}


두개의 life cycle 이 같다 => [복합 연관] 관계
주입 자체를 생성자를 통해서 주입
DI 는 자바에서도 존재하는 개념이고 스프링에서만 있는게 아니여~


Spring framework => 상속은 관심이 없어요
포함관계에서 생성자로 값들을 주입하는 방법 or setter로 값을 주입하는 방법 
2가지가 있습ㄴ다.

Constructor / setter Injection	 => A{ B b;}	life Cycle b 끝 A 클래스 끝

class A 
{
	private B b;
	public void set(B b) {
		this.b = b;
	}
}		필요에 따라 값을 받아감


setter 필요에 따라서 유연하게 접근이 가능하다??



정리)
순수한 JAVA 코드로 DI (의존성 주입이 가능)

1. 생성자를 통해서 (Consturctor Injection) : 의무적인 ...
2. setter 함수를 통해서 (Setter Injection ) : 필요에 의해서...
3. 다형성 (Interface) 활용 .... (생성자, setter 둘다 해당)

===========================================================================

Spring framework 사용

1. Spring.IO 사이트 방문
	1.1 http://projects.spring.io/spring-framework/
	1.2 
	
Spring framework 핵심 libs
Core, context, AOP, ORM IOP, .....
Core, Context, Beans, Express
add External jar file


